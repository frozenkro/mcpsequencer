// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package projectsdb

import (
	"context"
)

const addDependencyForTask = `-- name: AddDependencyForTask :exec
INSERT INTO dependencies (task_id, depends_on)
VALUES (?, ?)
`

type AddDependencyForTaskParams struct {
	TaskID    int64
	DependsOn int64
}

func (q *Queries) AddDependencyForTask(ctx context.Context, arg AddDependencyForTaskParams) error {
	_, err := q.db.ExecContext(ctx, addDependencyForTask, arg.TaskID, arg.DependsOn)
	return err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, description, absolute_path)
VALUES (?, ?, ?)
RETURNING project_id, name, description, absolute_path
`

type CreateProjectParams struct {
	Name         string
	Description  interface{}
	AbsolutePath interface{}
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.Description, arg.AbsolutePath)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.AbsolutePath,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (name, description, project_id, sort, is_completed, is_in_progress, notes)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING task_id, name, description, project_id, sort, is_completed, is_in_progress, notes
`

type CreateTaskParams struct {
	Name         string
	Description  string
	ProjectID    int64
	Sort         int64
	IsCompleted  int64
	IsInProgress int64
	Notes        interface{}
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Name,
		arg.Description,
		arg.ProjectID,
		arg.Sort,
		arg.IsCompleted,
		arg.IsInProgress,
		arg.Notes,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.ProjectID,
		&i.Sort,
		&i.IsCompleted,
		&i.IsInProgress,
		&i.Notes,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE project_id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, projectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, projectID)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE task_id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, taskID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const deleteTasksByProject = `-- name: DeleteTasksByProject :exec
DELETE FROM tasks
WHERE project_id = ?
`

func (q *Queries) DeleteTasksByProject(ctx context.Context, projectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTasksByProject, projectID)
	return err
}

const getAllProjects = `-- name: GetAllProjects :many
SELECT project_id, name, description, absolute_path
FROM projects
ORDER BY name
`

func (q *Queries) GetAllProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.AbsolutePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT task_id, name, description, project_id, sort, is_completed, is_in_progress, notes
FROM tasks
ORDER BY sort
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.ProjectID,
			&i.Sort,
			&i.IsCompleted,
			&i.IsInProgress,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDependenciesForTask = `-- name: GetDependenciesForTask :many
SELECT task_id, depends_on
FROM dependencies
WHERE task_id = ?
`

func (q *Queries) GetDependenciesForTask(ctx context.Context, taskID int64) ([]Dependency, error) {
	rows, err := q.db.QueryContext(ctx, getDependenciesForTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dependency
	for rows.Next() {
		var i Dependency
		if err := rows.Scan(&i.TaskID, &i.DependsOn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT project_id, name, description, absolute_path
FROM projects
WHERE project_id = ?
`

func (q *Queries) GetProject(ctx context.Context, projectID int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, projectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.AbsolutePath,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT task_id, name, description, project_id, sort, is_completed, is_in_progress, notes
FROM tasks
WHERE task_id = ?
`

func (q *Queries) GetTask(ctx context.Context, taskID int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.ProjectID,
		&i.Sort,
		&i.IsCompleted,
		&i.IsInProgress,
		&i.Notes,
	)
	return i, err
}

const getTasksByProject = `-- name: GetTasksByProject :many
SELECT task_id, name, description, project_id, sort, is_completed, is_in_progress, notes
FROM tasks
WHERE project_id = ?
ORDER BY sort
`

func (q *Queries) GetTasksByProject(ctx context.Context, projectID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.ProjectID,
			&i.Sort,
			&i.IsCompleted,
			&i.IsInProgress,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDependency = `-- name: RemoveDependency :exec
DELETE FROM dependencies
WHERE task_id = ? AND depends_on = ?
`

type RemoveDependencyParams struct {
	TaskID    int64
	DependsOn int64
}

func (q *Queries) RemoveDependency(ctx context.Context, arg RemoveDependencyParams) error {
	_, err := q.db.ExecContext(ctx, removeDependency, arg.TaskID, arg.DependsOn)
	return err
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = ?,
description = ?,
absolute_path = ?
WHERE project_id = ?
RETURNING project_id, name, description, absolute_path
`

type UpdateProjectParams struct {
	Name         string
	Description  interface{}
	AbsolutePath interface{}
	ProjectID    int64
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.AbsolutePath,
		arg.ProjectID,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.AbsolutePath,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET name = ?, description = ?, sort = ?, is_completed = ?, is_in_progress = ?, notes = ?
WHERE task_id = ?
RETURNING task_id, description, project_id, sort, is_completed, is_in_progress, notes
`

type UpdateTaskParams struct {
	Name         string
	Description  string
	Sort         int64
	IsCompleted  int64
	IsInProgress int64
	Notes        interface{}
	TaskID       int64
}

type UpdateTaskRow struct {
	TaskID       int64
	Description  string
	ProjectID    int64
	Sort         int64
	IsCompleted  int64
	IsInProgress int64
	Notes        interface{}
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (UpdateTaskRow, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Name,
		arg.Description,
		arg.Sort,
		arg.IsCompleted,
		arg.IsInProgress,
		arg.Notes,
		arg.TaskID,
	)
	var i UpdateTaskRow
	err := row.Scan(
		&i.TaskID,
		&i.Description,
		&i.ProjectID,
		&i.Sort,
		&i.IsCompleted,
		&i.IsInProgress,
		&i.Notes,
	)
	return i, err
}

const updateTaskSort = `-- name: UpdateTaskSort :exec
UPDATE tasks
SET sort = ?
WHERE task_id = ?
`

type UpdateTaskSortParams struct {
	Sort   int64
	TaskID int64
}

func (q *Queries) UpdateTaskSort(ctx context.Context, arg UpdateTaskSortParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskSort, arg.Sort, arg.TaskID)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE tasks
SET is_completed = ?, is_in_progress = ?
WHERE task_id = ?
RETURNING task_id, name, description, project_id, sort, is_completed, is_in_progress, notes
`

type UpdateTaskStatusParams struct {
	IsCompleted  int64
	IsInProgress int64
	TaskID       int64
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskStatus, arg.IsCompleted, arg.IsInProgress, arg.TaskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.ProjectID,
		&i.Sort,
		&i.IsCompleted,
		&i.IsInProgress,
		&i.Notes,
	)
	return i, err
}
