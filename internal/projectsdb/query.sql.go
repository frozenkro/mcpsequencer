// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package projectsdb

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, description, absolute_path)
VALUES (?, ?, ?)
RETURNING project_id, name, description, absolute_path
`

type CreateProjectParams struct {
	Name         string
	Description  interface{}
	AbsolutePath interface{}
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.Description, arg.AbsolutePath)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.AbsolutePath,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one

INSERT INTO tasks (name, description, project_id, sort, dependencies_json, is_completed, is_in_progress, notes)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING task_id, name, description, project_id, sort, dependencies_json, is_completed, is_in_progress, notes
`

type CreateTaskParams struct {
	Name             string
	Description      string
	ProjectID        int64
	Sort             int64
	DependenciesJson string
	IsCompleted      int64
	IsInProgress     int64
	Notes            interface{}
}

// Tasks CRUD Operations
func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Name,
		arg.Description,
		arg.ProjectID,
		arg.Sort,
		arg.DependenciesJson,
		arg.IsCompleted,
		arg.IsInProgress,
		arg.Notes,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.ProjectID,
		&i.Sort,
		&i.DependenciesJson,
		&i.IsCompleted,
		&i.IsInProgress,
		&i.Notes,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE project_id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, projectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, projectID)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE task_id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, taskID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const deleteTasksByProject = `-- name: DeleteTasksByProject :exec
DELETE FROM tasks
WHERE project_id = ?
`

func (q *Queries) DeleteTasksByProject(ctx context.Context, projectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTasksByProject, projectID)
	return err
}

const getAllProjects = `-- name: GetAllProjects :many
SELECT project_id, name, description, absolute_path
FROM projects
ORDER BY name
`

func (q *Queries) GetAllProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.AbsolutePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectsWithTaskCounts = `-- name: GetAllProjectsWithTaskCounts :many
SELECT 
    p.project_id,
    p.name,
    p.description,
    p.absolute_path,
    COUNT(t.task_id) as task_count,
    COUNT(CASE WHEN t.is_completed = 1 THEN 1 END) as completed_count,
    COUNT(CASE WHEN t.is_in_progress = 1 THEN 1 END) as failed_count
FROM projects p
LEFT JOIN tasks t ON p.project_id = t.project_id
GROUP BY p.project_id, p.name
ORDER BY p.name
`

type GetAllProjectsWithTaskCountsRow struct {
	ProjectID      int64
	Name           string
	Description    interface{}
	AbsolutePath   interface{}
	TaskCount      int64
	CompletedCount int64
	FailedCount    int64
}

func (q *Queries) GetAllProjectsWithTaskCounts(ctx context.Context) ([]GetAllProjectsWithTaskCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllProjectsWithTaskCounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectsWithTaskCountsRow
	for rows.Next() {
		var i GetAllProjectsWithTaskCountsRow
		if err := rows.Scan(
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.AbsolutePath,
			&i.TaskCount,
			&i.CompletedCount,
			&i.FailedCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT task_id, name, description, project_id, sort, dependencies_json, is_completed, is_in_progress, notes
FROM tasks
ORDER BY sort
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.ProjectID,
			&i.Sort,
			&i.DependenciesJson,
			&i.IsCompleted,
			&i.IsInProgress,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompletedTasks = `-- name: GetCompletedTasks :many
SELECT task_id, name, description, project_id, sort, dependencies_json, is_completed, is_in_progress, notes
FROM tasks
WHERE is_completed = 1
ORDER BY sort
`

func (q *Queries) GetCompletedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getCompletedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.ProjectID,
			&i.Sort,
			&i.DependenciesJson,
			&i.IsCompleted,
			&i.IsInProgress,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingTasks = `-- name: GetPendingTasks :many
SELECT task_id, name, description, project_id, sort, dependencies_json, is_completed, is_in_progress, notes
FROM tasks
WHERE is_completed = 0 AND is_in_progress = 0
ORDER BY sort
`

func (q *Queries) GetPendingTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getPendingTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.ProjectID,
			&i.Sort,
			&i.DependenciesJson,
			&i.IsCompleted,
			&i.IsInProgress,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT project_id, name, description, absolute_path
FROM projects
WHERE project_id = ?
`

func (q *Queries) GetProject(ctx context.Context, projectID int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, projectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.AbsolutePath,
	)
	return i, err
}

const getProjectWithTaskCount = `-- name: GetProjectWithTaskCount :one
SELECT 
    p.project_id,
    p.name,
    p.description,
    p.absolute_path,
    COUNT(t.task_id) as task_count,
    COUNT(CASE WHEN t.is_completed = 1 THEN 1 END) as completed_count,
    COUNT(CASE WHEN t.is_in_progress = 1 THEN 1 END) as failed_count
FROM projects p
LEFT JOIN tasks t ON p.project_id = t.project_id
WHERE p.project_id = ?
GROUP BY p.project_id, p.name
`

type GetProjectWithTaskCountRow struct {
	ProjectID      int64
	Name           string
	Description    interface{}
	AbsolutePath   interface{}
	TaskCount      int64
	CompletedCount int64
	FailedCount    int64
}

func (q *Queries) GetProjectWithTaskCount(ctx context.Context, projectID int64) (GetProjectWithTaskCountRow, error) {
	row := q.db.QueryRowContext(ctx, getProjectWithTaskCount, projectID)
	var i GetProjectWithTaskCountRow
	err := row.Scan(
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.AbsolutePath,
		&i.TaskCount,
		&i.CompletedCount,
		&i.FailedCount,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT task_id, name, description, project_id, sort, dependencies_json, is_completed, is_in_progress, notes
FROM tasks
WHERE task_id = ?
`

func (q *Queries) GetTask(ctx context.Context, taskID int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.ProjectID,
		&i.Sort,
		&i.DependenciesJson,
		&i.IsCompleted,
		&i.IsInProgress,
		&i.Notes,
	)
	return i, err
}

const getTasksByProject = `-- name: GetTasksByProject :many
SELECT task_id, name, description, project_id, sort, dependencies_json, is_completed, is_in_progress, notes
FROM tasks
WHERE project_id = ?
ORDER BY sort
`

func (q *Queries) GetTasksByProject(ctx context.Context, projectID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.ProjectID,
			&i.Sort,
			&i.DependenciesJson,
			&i.IsCompleted,
			&i.IsInProgress,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksWithProject = `-- name: GetTasksWithProject :many
SELECT 
    t.task_id,
    t.name,
    t.description,
    t.project_id,
    t.sort,
    t.dependencies_json,
    t.is_completed,
    t.is_in_progress,
    t.notes,
    p.name as project_name
FROM tasks t
JOIN projects p ON t.project_id = p.project_id
ORDER BY p.name, t.sort
`

type GetTasksWithProjectRow struct {
	TaskID           int64
	Name             string
	Description      string
	ProjectID        int64
	Sort             int64
	DependenciesJson string
	IsCompleted      int64
	IsInProgress     int64
	Notes            interface{}
	ProjectName      string
}

func (q *Queries) GetTasksWithProject(ctx context.Context) ([]GetTasksWithProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, getTasksWithProject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTasksWithProjectRow
	for rows.Next() {
		var i GetTasksWithProjectRow
		if err := rows.Scan(
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.ProjectID,
			&i.Sort,
			&i.DependenciesJson,
			&i.IsCompleted,
			&i.IsInProgress,
			&i.Notes,
			&i.ProjectName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = ?,
description = ?,
absolute_path = ?
WHERE project_id = ?
RETURNING project_id, name, description, absolute_path
`

type UpdateProjectParams struct {
	Name         string
	Description  interface{}
	AbsolutePath interface{}
	ProjectID    int64
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.AbsolutePath,
		arg.ProjectID,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.AbsolutePath,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET name = ?, description = ?, sort = ?, dependencies_json = ?, is_completed = ?, is_in_progress = ?, notes = ?
WHERE task_id = ?
RETURNING task_id, description, project_id, sort, is_completed, is_in_progress, notes
`

type UpdateTaskParams struct {
	Name             string
	Description      string
	Sort             int64
	DependenciesJson string
	IsCompleted      int64
	IsInProgress     int64
	Notes            interface{}
	TaskID           int64
}

type UpdateTaskRow struct {
	TaskID       int64
	Description  string
	ProjectID    int64
	Sort         int64
	IsCompleted  int64
	IsInProgress int64
	Notes        interface{}
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (UpdateTaskRow, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Name,
		arg.Description,
		arg.Sort,
		arg.DependenciesJson,
		arg.IsCompleted,
		arg.IsInProgress,
		arg.Notes,
		arg.TaskID,
	)
	var i UpdateTaskRow
	err := row.Scan(
		&i.TaskID,
		&i.Description,
		&i.ProjectID,
		&i.Sort,
		&i.IsCompleted,
		&i.IsInProgress,
		&i.Notes,
	)
	return i, err
}

const updateTaskSort = `-- name: UpdateTaskSort :exec
UPDATE tasks
SET sort = ?
WHERE task_id = ?
`

type UpdateTaskSortParams struct {
	Sort   int64
	TaskID int64
}

func (q *Queries) UpdateTaskSort(ctx context.Context, arg UpdateTaskSortParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskSort, arg.Sort, arg.TaskID)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE tasks
SET is_completed = ?, is_in_progress = ?
WHERE task_id = ?
RETURNING task_id, name, description, project_id, sort, dependencies_json, is_completed, is_in_progress, notes
`

type UpdateTaskStatusParams struct {
	IsCompleted  int64
	IsInProgress int64
	TaskID       int64
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskStatus, arg.IsCompleted, arg.IsInProgress, arg.TaskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.ProjectID,
		&i.Sort,
		&i.DependenciesJson,
		&i.IsCompleted,
		&i.IsInProgress,
		&i.Notes,
	)
	return i, err
}
